"""Tests for payment model."""

import pytest
import uuid
from decimal import Decimal
from datetime import datetime

from app.models.payment import Payment, PaymentStatus
from app.models.user import User
from app.models.quote import Quote


class TestPaymentModel:
    """Test Payment model."""
    
    def test_payment_creation(self):
        """Test creating a payment instance."""
        payment = Payment(
            payment_intent_id="payment_123456789",
            user_id=uuid.uuid4(),
            quote_id=uuid.uuid4(),
            payment_status=PaymentStatus.PENDING,
            amount=Decimal("5000"),  # $50.00 in cents
            currency="SGD",
            product_name="Travel Insurance"
        )
        
        assert payment.payment_intent_id == "payment_123456789"
        assert payment.payment_status == PaymentStatus.PENDING
        assert payment.amount == Decimal("5000")
        assert payment.currency == "SGD"
        assert payment.product_name == "Travel Insurance"
        # Note: id is auto-generated by database on insert, not on instance creation
    
    def test_payment_status_enum(self):
        """Test PaymentStatus enum values."""
        assert PaymentStatus.PENDING.value == "pending"
        assert PaymentStatus.COMPLETED.value == "completed"
        assert PaymentStatus.FAILED.value == "failed"
        assert PaymentStatus.EXPIRED.value == "expired"
    
    def test_payment_default_values(self):
        """Test payment default values."""
        payment = Payment(
            payment_intent_id="payment_123456789",
            user_id=uuid.uuid4(),
            quote_id=uuid.uuid4(),
            amount=Decimal("5000")
        )
        
        # Note: Default values are set by database, not on instance creation
        # When explicitly setting defaults in constructor, they apply
        payment_with_defaults = Payment(
            payment_intent_id="payment_123456789",
            user_id=uuid.uuid4(),
            quote_id=uuid.uuid4(),
            payment_status=PaymentStatus.PENDING,  # Explicitly set
            amount=Decimal("5000"),
            currency="SGD"  # Explicitly set
        )
        
        assert payment_with_defaults.payment_status == PaymentStatus.PENDING
        assert payment_with_defaults.currency == "SGD"
    
    def test_payment_repr(self):
        """Test payment string representation."""
        payment = Payment(
            id=uuid.uuid4(),
            payment_intent_id="payment_123456789",
            user_id=uuid.uuid4(),
            quote_id=uuid.uuid4(),
            payment_status=PaymentStatus.COMPLETED,
            amount=Decimal("5000")
        )
        
        repr_str = repr(payment)
        assert "Payment" in repr_str
        assert "payment_123456789" in repr_str
        # Check for enum representation or status value
        assert "COMPLETED" in repr_str or "completed" in repr_str or "PaymentStatus.COMPLETED" in repr_str
    
    def test_payment_status_transitions(self):
        """Test payment status transitions."""
        payment = Payment(
            payment_intent_id="payment_123456789",
            user_id=uuid.uuid4(),
            quote_id=uuid.uuid4(),
            payment_status=PaymentStatus.PENDING,
            amount=Decimal("5000")
        )
        
        # Transition to completed
        payment.payment_status = PaymentStatus.COMPLETED
        assert payment.payment_status == PaymentStatus.COMPLETED
        
        # Transition to failed
        payment.payment_status = PaymentStatus.FAILED
        assert payment.payment_status == PaymentStatus.FAILED
        
        # Transition to expired
        payment.payment_status = PaymentStatus.EXPIRED
        assert payment.payment_status == PaymentStatus.EXPIRED
    
    def test_payment_with_stripe_ids(self):
        """Test payment with Stripe session and payment intent IDs."""
        payment = Payment(
            payment_intent_id="payment_123456789",
            user_id=uuid.uuid4(),
            quote_id=uuid.uuid4(),
            stripe_session_id="cs_test_123",
            stripe_payment_intent="pi_test_123",
            payment_status=PaymentStatus.PENDING,
            amount=Decimal("5000")
        )
        
        assert payment.stripe_session_id == "cs_test_123"
        assert payment.stripe_payment_intent == "pi_test_123"
    
    def test_payment_webhook_processed_at(self):
        """Test payment webhook processed timestamp."""
        payment = Payment(
            payment_intent_id="payment_123456789",
            user_id=uuid.uuid4(),
            quote_id=uuid.uuid4(),
            payment_status=PaymentStatus.PENDING,
            amount=Decimal("5000")
        )
        
        # Initially should be None
        assert payment.webhook_processed_at is None
        
        # Set webhook processed timestamp
        from datetime import timezone
        now = datetime.now(timezone.utc)
        payment.webhook_processed_at = now
        assert payment.webhook_processed_at == now

